#!/bin/sh

. /etc.defaults/rc.subr

#synorcd=/usr/syno/sbin/synorcd

# Package
PACKAGE="RoonServer"
DNAME="Roon Server"
USER="root"
ROON_DIR="/var/packages/${PACKAGE}/target"
ROON_LOG_FILE="${ROON_DIR}/RoonServer.log"
ROON_LIB_DIR="${ROON_DIR}/lib"
ALSA_CONF="${ROON_DIR}/etc/alsa/alsa.conf"
ARCH=$(uname -m)
PID=`( ps -Awwo pid,args | grep "[R]oonServer " | awk '{print $1}' )`
KERNELMODULE="soundcore snd-page-alloc snd snd-seq-device snd-rawmidi snd-usbmidi-lib snd-usb-lib snd-hwdep snd-timer snd-pcm snd-usb-audio snd-mixer-oss snd-pcm-oss"


start_daemon ()
{
	# Start a new log file.
	rm "${ROON_LOG_FILE}"
	echo "$(date +%d.%m.%y-%H:%M:%S) --- ##### Starting RoonServer #####" >> "${ROON_LOG_FILE}"

	# Get the location of RoonServer Share
	ROON_DATA_DIR=`su - root -c "/var/packages/${PACKAGE}/scripts/getsharelocation.sh;"`
	echo "$(date +%d.%m.%y-%H:%M:%S) --- ROON_DATA_DIR = ${ROON_DATA_DIR}" >> ${ROON_LOG_FILE}
		
	# Launch the service in the background if RoonServer share exists.
	if [ "$ROON_DATA_DIR" != "" ]; then
            SYNOLoadModules $KERNELMODULE 2>&1 >> ${ROON_LOG_FILE}
            su - root -c "umask 000; export ROON_DATAROOT=${ROON_DATA_DIR}; export LD_LIBRARY_PATH=${ROON_LIB_DIR}:${LD_LIBRARY_PATH}; export ALSA_CONFIG_PATH=${ALSA_CONF}; ${ROON_DIR}/RoonServer/start.sh 2>&1 >> ${ROON_LOG_FILE}" &
	else
		echo "ERROR: Shared folder \"RoonServer\" could not be found. Please create it in the DSM before launching the package." >> "${ROON_LOG_FILE}"
		return 1
	fi
}

stop_daemon ()
{
    kill $PID
    wait_for_status 1 20 || kill -9 $PID
   	echo "$(date +%d.%m.%y-%H:%M:%S) --- ##### RoonServer has been stopped. #####" >> "${ROON_LOG_FILE}"
}

daemon_status ()
{
    ## Check with ps command if RoonServer is running. If RoonServer updates itself, the PID changes.
    if [ "$PID" != ""] ] && kill -0 $PID > /dev/null 2>&1; then
        return
    fi
    
    return 1
}

wait_for_status ()
{
    counter=$2
    while [ ${counter} -gt 0 ]; do
        daemon_status
        [ $? -eq $1 ] && return
        let counter=counter-1
        sleep 1
    done
    return 1
}


case $1 in
    start)
        if daemon_status; then
            echo ${DNAME} is already running
        else
            echo Starting ${DNAME} ...
            start_daemon
        fi
        ;;
    stop)
        if daemon_status; then
            echo Stopping ${DNAME} ...
            stop_daemon
        else
            echo ${DNAME} is not running
        fi
        ;;
    status)
        if daemon_status; then
            echo ${DNAME} is running
            exit 0
        else
            echo ${DNAME} is not running
            exit 1
        fi
        ;;
    log)
        echo ${ROON_LOG_FILE}
        ;;
    *)
        exit 1
        ;;
esac
